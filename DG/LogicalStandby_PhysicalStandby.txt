
Primary database (primary role)

*.db_name='DEMODG'
*.db_unique_name='PRIMARY'
*.fal_client='TO_PRIMARY'
*.fal_server='TO_STANDBY1','TO_STANDBY2'
*.log_archive_config='DG_CONFIG=(PRIMARY,STANDBY1,STANDBY2)'
*.LOG_ARCHIVE_DEST_1='LOCATION=/archivelog/ VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=PRIMARY'
*.LOG_ARCHIVE_DEST_2='SERVICE=TO_STANDBY1 LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=STANDBY1'
*.LOG_ARCHIVE_DEST_3='SERVICE=TO_STANDBY2 LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES, PRIMARY_ROLE) DB_UNIQUE_NAME=STANDBY2';
*.log_archive_dest_state_1='ENABLE'
*.log_archive_dest_state_2='DEFER'
*.log_archive_dest_state_3='DEFER'
*.LOG_ARCHIVE_FORMAT='DEMODG_%t_%s_%r.arc'
*.LOG_ARCHIVE_MAX_PROCESSES=30
*.STANDBY_FILE_MANAGEMENT='AUTO'
*.service_names='PRIMARY'
*.db_create_online_log_dest_1='/redo01'
*.db_create_online_log_dest_2='/redo02'
 
====Physical standby database (standby role)

*.db_name='DEMODG'
*.db_unique_name='STANDBY1'
*.fal_client='TO_STANDBY1'
*.fal_server='TO_PRIMARY','TO_STANDBY2'
*.log_archive_config='DG_CONFIG=(PRIMARY,STANDBY1,STANDBY2)'
*.LOG_ARCHIVE_DEST_1='LOCATION=/archivelog/ VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=STANDBY1'
*.LOG_ARCHIVE_DEST_2='SERVICE=TO_PRIMARY LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=PRIMARY'
*.LOG_ARCHIVE_DEST_3='SERVICE=TO_STANDBY2 LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=STANDBY2'
*.log_archive_dest_state_1='ENABLE'
*.log_archive_dest_state_2='ENABLE'
*.log_archive_dest_state_3='ENABLE'
*.LOG_ARCHIVE_FORMAT='DEMODG%t_%s_%r.arc'
*.LOG_ARCHIVE_MAX_PROCESSES=30
*.STANDBY_FILE_MANAGEMENT='AUTO'
*.service_names='STANDBY1'
*.db_create_online_log_dest_1='/redo01'
*.db_create_online_log_dest_2='/redo02'
 
============Logical standby database (standby role)
*.db_name='DEMODG'
*.db_unique_name='STANDBY2'
#*.fal_client='TO_STANDBY2'
#*.fal_server='TO_STANDBY1','TO_PRIMARY'
*.log_archive_config='DG_CONFIG=(PRIMARY,STANDBY1,STANDBY2)'
*.LOG_ARCHIVE_DEST_1='LOCATION=/USE_DB_RECOVERY_FILE_DEST/ VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=STANDBY2'
*.LOG_ARCHIVE_DEST_2='LOCATION=/USE_DB_RECOVERY_FILE_DEST/ LGWR ASYNC VALID_FOR=(STANDBY_LOGFILES,STANDBY_ROLE) DB_UNIQUE_NAME=STANDBY2'
*.log_archive_dest_state_1='ENABLE'
*.log_archive_dest_state_2='ENABLE'
*.LOG_ARCHIVE_FORMAT='DEMODG%t_%s_%r.arc'
*.LOG_ARCHIVE_MAX_PROCESSES=30
*.STANDBY_FILE_MANAGEMENT='AUTO'
*.service_names='STANDBY2'
*.db_create_online_log_dest_1='/redo01'
*.db_create_online_log_dest_2='/redo02' 


log_archive_config='DG_CONFIG=(DB11R2, DB11R2DR, DB11R2LS)';
 
LOG_ARCHIVE_DEST_1='LOCATION=USE_DB_RECOVERY_FILE_DEST  VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=DB11R2';
LOG_ARCHIVE_DEST_2='SERVICE=DB11R2DR LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=DB11R2DR';
LOG_ARCHIVE_DEST_3='SERVICE=DB11R2LS LGWR ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=DB11R2LS';
LOG_ARCHIVE_DEST_STATE_1=ENABLE;
LOG_ARCHIVE_DEST_STATE_2=DEFER; # enable it after creating logical standby
LOG_ARCHIVE_DEST_STATE_3=DEFER; # enable it after creating physical standby
 
FAL_SERVER=DB11R2DR;
FAL_CLIENT=DB11R2;
 
LOG_ARCHIVE_MAX_PROCESSES=16; # it should be between 4 and 30
Note the LOG_ARCHIVE_DEST_STATE_2 and LOG_ARCHIVE_DEST_STATE_3 are deferred at present. We’ll enable after creating physical standby and logical standby.

Note the setting of LOG_ARCHIVE_MAX_PROCESSES=16. The archive processes on primary database are responsible for archiving ORL as well as sending archived logs to standby to resolve redo log gap. On the standby site, they are responsible for archiving SRLs and forwarding archived log to cascade standby databases. So we need to specify this parameter to at least 4 with maximum of 30.

Step 1.5) Add entries in tnsnames.ora for physical standby and logical standby on primary database

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
DB11R2DR =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.56.10)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVICE_NAME = DB11R2DR)
    )
  )
 
DB11R2LS =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.56.10)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVICE_NAME = DB11R2LS)
    )
  )
Step 2) Modifying Physical Standby database

Step 2.1) Create a password file on physical standby database

[oracle@gchen-pc db]$ cd /app/oracle/product/10.2.0/db/dbs

[oracle@gchen-pc dbs]$ orapwd file=orapwDB11R2DR password=iamsys entries=5

Step 2.2) Create a init parameter file from spfile on primary database for physical database

1
2
3
4
5
[oracle@gchen-pc dbs]$ export ORACLE_SID=DB11R2
[oracle@gchen-pc dbs]$ sqlplus / as sysdba
sys@db11r2> create pfile='/app/oracle/product/11.2.0/db/dbs/initDB11R2DR.ora' from spfile;
 
File created.
Modify “/app/oracle/product/10.2.0/db/dbs/initDB11R2DR.ora” to set the following values for physical standby database init parameters:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
# ---[ File Destination Parameters ] --- #
 
*.audit_file_dest='/app/oracle/admin/DB11R2DR/adump'
*.db_create_file_dest='/app/oracle/oradata'
*.db_recovery_file_dest_size=4294967296
*.db_recovery_file_dest='/app/oracle/flash_recovery_area'
*.diagnostic_dest='/app/oracle'
 
# ---[ Role-independent Parameters ] --- #
*.archive_lag_target=900
*.compatible='11.2.0.0.0'
*.control_files='/app/oracle/oradata/DB11R2DR/control01.ctl','/app/oracle/flash_recovery_area/DB11R2DR/controlfile/control02.ctl'
*.db_name='DB11R2'
*.db_domain=''
*.control_file_record_keep_time=14
*.db_block_size=8192
*.dispatchers='(PROTOCOL=TCP) (SERVICE=DB11R2DRXDB)'
*.instance_name='DB11R2DR
*.log_archive_max_processes=4
*.remote_login_passwordfile='exclusive'
*.memory_max_target=1572864000
*.memory_target=1572864000
*.open_cursors=300
*.processes=150
*.remote_login_passwordfile='EXCLUSIVE'
*.sec_case_sensitive_logon=FALSE
*.undo_tablespace='UNDOTBS1'
*.log_archive_format='%t_%s_%r.dbf'
*.log_checkpoints_to_alert=TRUE
*.standby_file_management='auto'
 
# ---[ Primary Role Parameters ] --- #
 
*.db_unique_name='DB11R2DR'
*.service_names='DB11R2DR'
*.log_archive_config='DG_CONFIG=(DB11R2, DB11R2DR, DB11R2LS)'
*.log_archive_dest_1='location=use_db_recovery_file_dest VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=DB11R2DR'
*.log_archive_dest_2='service=DB11R2 LGWR ASYNC valid_for=(online_logfiles,primary_role) db_unique_name=DB11R2'
*.log_archive_dest_3='service=DB11R2LS LGWR ASYNC valid_for=(online_logfiles,primary_role) db_unique_name=DB11R2LS'
 
*.log_archive_dest_state_1='enable'
*.log_archive_dest_state_2='defer'   # enable when logical standby is created
*.log_archive_dest_state_3='enable'
 
# ---[ Standby Role Parameters ] --- #
*.db_file_name_convert='/app/oracle/oradata/DB11R2/','/app/oracle/oradata/DB11R2DR/'
*.log_file_name_convert='/app/oracle/flash_recovery_area/DB11R2/onlinelog/','/app/oracle/flash_recovery_area/DB11R2DR/onlinelog/'
*.fal_client='DB11R2DR'
*.fal_server='DB11R2'
Step 2.3) Create required directories for standby database

audit directory

1
2
[oracle@gchen-pc ~]$ cd /app/oracle/admin
[oracle@gchen-pc admin]$ mkdir -p DB11R2DR/adump
oradata directory

1
2
3
4
5
6
7
[oracle@gchen-pc admin]$ cd /app/oracle/oradata
 
[oracle@gchen-pc oradata]$ tree -d DB11R2
DB11R2
|-- onlinelog
 
[oracle@gchen-pc oradata]$ mkdir -p DB11R2DR/onlinelog
Flash recovery area directory

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
[oracle@gchen-pc oradata]$ cd /app/oracle/flash_recovery_area/
[oracle@gchen-pc flash_recovery_area]$ tree -d -L 1 DB11R2/
DB11R2/
|-- archivelog
|-- autobackup
|-- backupset
|-- backupset_archivelog
|-- backupset_database
|-- controlfile
|-- onlinelog
`-- snapshot_controlf
 
[oracle@gchen-pc flash_recovery_area]$ mkdir DB11R2DR
[oracle@gchen-pc flash_recovery_area]$ cd DB11R2DR
[oracle@gchen-pc DB11R2DR]$ mkdir archivelog autobackup backupset backupset_archivelog backupset_database controlfile onlinelog snapshot_controlf
Step 2.4) Add tnsnames entries of logical standby database and primary database on physical standby database

In the tnsnames.ora of physical standby database add these entries (as we are creating standby on a same host, it’s the same as the tnsnames.ora of primary database).

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
# primary database
DB11R2 =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = gchen-pc.localdomain)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVICE_NAME = DB11R2)
    )
  )
 
#logical standby
DB11R2LS =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = gchen-pc.localdomain)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVICE_NAME = DB11R2LS)
    )
  )
Step 2.5) Static registration of physical standby database to listener

In the listener.ora of physical standby database, staticly register the standby database to listener. This is required by RMAN connection to standby when the standby is in nomount status.

1
2
3
4
5
6
7
8
9
10
11
12
13
LISTENER =
(ADDRESS_LIST=
(ADDRESS=(PROTOCOL=tcp)(HOST=gchen-pc.localdomain)(PORT=1521))
)
 
SID_LIST_LISTENER =
(SID_LIST =
(SID_DESC =
(GLOBAL_DBNAME = DB11R2DR)
(ORACLE_HOME = /app/oracle/product/11.2.0/db)
(SID_NAME = DB11R2DR)
)
)
Reload listener to take the changes into effect.

[oracle@gchen-pc admin]$ lsnrctl reload; lsnrctl status
Step 3) Create physical standby by “RMAN DUPLICATE FROM ACTIVE DATABASE”

Step 3.1) Start up standby database in nomount state

1
2
3
4
5
6
7
8
9
10
[oracle@gchen-pc dbs]$ export ORACLE_SID=DB11R2DR
[oracle@gchen-pc dbs]$ sqlplus / as sysdba
idle> startup nomount pfile='initDB11R2DR.ora';
ORACLE instance started.
 
Total System Global Area  835104768 bytes
Fixed Size                  2217952 bytes
Variable Size             490735648 bytes
Database Buffers          335544320 bytes
Redo Buffers                6606848 bytes
Step 3.2) From primary database, connect to both primary database and standby database using RMAN

1
2
3
4
5
6
7
export ORACLE_SID=DB11R2
[oracle@gchen-pc dbs]$ rman target sys/iamsys@db11r2 auxiliary sys/iamsys@db11r2dr
 
connected to target database: DB11R2 (DBID=4171050541)
connected to auxiliary database (not started)
                                ^^^^^^^^^^^^^
                                (it should be "not mounted", it seems something wrong)
Step 3.3) Run this command to create standby database

1
2
3
4
5
6
7
8
9
10
11
RMAN> duplicate target database for standby from active database dorecover;
 
Starting Duplicate Db at 2011-01-26 10:47:35
RMAN-00571: ===========================================================
RMAN-00569: =============== ERROR MESSAGE STACK FOLLOWS ===============
RMAN-00571: ===========================================================
RMAN-03002: failure of Duplicate Db command at 01/26/2011 10:47:35
RMAN-06403: could not obtain a fully authorized session
RMAN-04006: error from auxiliary database: ORA-01034: ORACLE not available
ORA-27101: shared memory realm does not exist
Linux-x86_64 Error: 2: No such file or directory
After googling the error and check network settings, it turned out to be a problem of setting of static registration of the standby database. I correct it and then reload  it.

Repeat the step 3.2 and 3.3, this time it seems working fine.

+ expand source
Step 3.4) Connect to the physical standby database and start MRP (Managed Recovery Process)

1
2
3
4
5
6
7
8
9
10
11
12
13
export ORACLE_SID=DB11R2DR
sqlplus / as sysdba
 
idle> shutdown immediate;
idl> starup
Database opened.
 
sys@db11r2dr> recover managed standby database using current logfile disconnect;
Media recovery complete.
 
[oracle@gchen-pc dbs]$ ps -ef |grep mrp
oracle    8346     1  0 00:45 ?        00:00:01 ora_mrp0_DB11R2DR
oracle    8370  5019  0 00:47 pts/2    00:00:00 grep mrp
Step 3.5) Remember to enable log_archive_dest_n_state on primary database

1
sys@db11r2> alter system set LOG_ARCHIVE_DEST_STATE_3=ENABLE;
Step 4) Modifying Logical Standby database

Step 4.1) Create a password file on physical standby database

[oracle@gchen-pc db]$ cd /app/oracle/product/10.2.0/db/dbs

[oracle@gchen-pc dbs]$ orapwd file=orapwDB11R2LS password=iamsys entries=5

Step 4.2) Create a init parameter file from spfile on primary database and save it into Oracle Home of physical database

1
2
3
4
5
[oracle@gchen-pc dbs]$ export ORACLE_SID=DB11R2
[oracle@gchen-pc dbs]$ sqlplus / as sysdba
sys@db11r2> create pfile='/app/oracle/product/11.2.0/db/dbs/initDB11R2LS.ora' from spfile;
 
File created.
Modify “/app/oracle/product/10.2.0/db/dbs/initDB11R2DR.ora” to set the following values for physical standby database init parameters:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
# ---[ File Destination Parameters ] --- #
 
*.audit_file_dest='/app/oracle/admin/DB11R2LS/adump'
*.db_create_file_dest='/app/oracle/oradata'
*.db_recovery_file_dest_size=4294967296
*.db_recovery_file_dest='/app/oracle/flash_recovery_area'
*.diagnostic_dest='/app/oracle'
 
# ---[ Role-independent Parameters ] --- #
*.archive_lag_target=900
*.compatible='11.2.0.0.0'
*.control_files='/app/oracle/oradata/DB11R2LS/control01.ctl','/app/oracle/flash_recovery_area/DB11R2LS/controlfile/control02.ctl'
*.db_name='DB11R2'
*.db_domain=''
*.control_file_record_keep_time=14
*.db_block_size=8192
*.dispatchers='(PROTOCOL=TCP) (SERVICE=DB11R2LSXDB)'
*.instance_name='DB11R2LS'
*.log_archive_max_processes=4
*.remote_login_passwordfile='exclusive'
*.memory_max_target=1572864000
*.memory_target=1572864000
*.open_cursors=300
*.processes=150
*.remote_login_passwordfile='EXCLUSIVE'
*.sec_case_sensitive_logon=FALSE
*.undo_tablespace='UNDOTBS1'
*.log_archive_format='%t_%s_%r.dbf'
*.log_checkpoints_to_alert=TRUE
*.standby_file_management='auto'
 
# ---[ Primary Role Parameters ] --- #
 
*.db_unique_name='DB11R2LS'
*.service_names='DB11R2LS'
*.log_archive_config='DG_CONFIG=(DB11R2, DB11R2DR, DB11R2LS)'
*.log_archive_dest_1='LOCATION=USE_DB_RECOVERY_FILE_DEST VALID_FOR=(ONLINE_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=db11r2ls'
*.log_archive_dest_2='LOCATION=USE_DB_RECOVERY_FILE_DEST VALID_FOR=(STANDBY_LOGFILES,STANDBY_ROLE) DB_UNIQUE_NAME=db11r2ls'
*.log_archive_dest_state_1='enable'
*.log_archive_dest_state_2='enable'
 
# ---[ Standby Role Parameters ] --- #
*.db_file_name_convert='/app/oracle/oradata/DB11R2/','/app/oracle/oradata/DB11R2LS/'
*.log_file_name_convert='/app/oracle/flash_recovery_area/DB11R2/onlinelog/','/app/oracle/flash_recovery_area/DB11R2LS/onlinelog/'
Step 4.3) Create required directories for standby database

audit directory

1
2
[oracle@gchen-pc ~]$ cd /app/oracle/admin
[oracle@gchen-pc admin]$ mkdir -p DB11R2LS/adump
oradata directory

1
2
3
4
5
6
7
[oracle@gchen-pc admin]$ cd /app/oracle/oradata
 
[oracle@gchen-pc oradata]$ tree -d DB11R2
DB11R2
|-- onlinelog
 
[oracle@gchen-pc oradata]$ mkdir -p DB11R2LS/onlinelog
Flash recovery area directory

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
[oracle@gchen-pc oradata]$ cd /app/oracle/flash_recovery_area/
[oracle@gchen-pc flash_recovery_area]$ tree -d -L 1 DB11R2/
DB11R2/
|-- archivelog
|-- autobackup
|-- backupset
|-- backupset_archivelog
|-- backupset_database
|-- controlfile
|-- onlinelog
`-- snapshot_controlf
 
[oracle@gchen-pc flash_recovery_area]$ mkdir DB11R2LS
[oracle@gchen-pc flash_recovery_area]$ cd DB11R2LS
[oracle@gchen-pc DB11R2DR]$ mkdir archivelog autobackup backupset backupset_archivelog backupset_database controlfile onlinelog snapshot_controlf
Step 4.4) Add tnsnames entries of physical standby database and primary database on physical standby database

In the tnsnames.ora of physical standby database add these entries (as we are creating standby on a same host, it’s the same as the tnsnames.ora of primary database).

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
# primary database
DB11R2 =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = gchen-pc.localdomain)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVICE_NAME = DB11R2)
    )
  )
 
#physical standby
DB11R2DR =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = gchen-pc.localdomain)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVICE_NAME = DB11R2DR)
    )
  )
Step 4.5) Static registration of logical standby database to listener

In the listener.ora of physical standby database, staticly register the standby database to listener. This is required by RMAN connection to standby when the standby is in nomount status.

1
2
3
4
5
6
7
8
9
10
11
12
13
LISTENER =
(ADDRESS_LIST=
(ADDRESS=(PROTOCOL=tcp)(HOST=gchen-pc.localdomain)(PORT=1521))
)
 
SID_LIST_LISTENER =
(SID_LIST =
(SID_DESC =
(GLOBAL_DBNAME = DB11R2LS)
(ORACLE_HOME = /app/oracle/product/11.2.0/db)
(SID_NAME = DB11R2LS)
)
)
Reload listener to take the changes into effect.

[oracle@gchen-pc admin]$ lsnrctl reload; lsnrctl status
Step 5) Create logical standby database

We can create a logical standby database by setting up a physical standby database first.Before creating the physical standby, we have a few of prerequisites to check.

1) prerequisite

A few data types are not supported on standby database such as listed below:

BFILE
ROWID, UROWID
User-defined types
Collections (including VARRAYS and nested tables)
XML type
Encrypted columns
Multimedia data types (including Spatial, Image, and Context)
For a completed list of data type and storage consideration, please refer to Appendix C in document “Oracle® Data Guard Concepts and Administration” . Moreover, physical allocation of the data in logical standby database is different from that in primary database, so ROWID of query generated on primary database can not be used to identify corresponding rows in logical standby database. Instead, Oracle uses primary key, if presents in a table, along with modified columns as unique identifier, or in case of absence of primary key, uses unique index along with modified columns, or in case of absence of both, uses all modified columns as unique identifier. We need to find out all tables lack of ability to uniquely identify rows on standby database. 1.1) identifying data types unsupported by standby database Run the following query to find out data types on primary database that are not supported by logical standby.

1
2
3
4
5
select OWNER, TABLE_NAME, COLUMN_NAME, ATTRIBUTES, DATA_TYPE from dba_logstdby_unsupported;
 
OWNER      TABLE_NAME           COLUMN_NAME          ATTRIBUTES DATA_TYPE
---------- -------------------- -------------------- ---------- --------------------------------
SCOTT      EXCEPTIONS           ROW_ID                          UROWID
1.2 Ensure Table Rows in the Primary Database Can Be Uniquely Identified Use following query to display a list of tables that SQL Apply may not be able to uniquely identify:

1
2
3
4
5
6
7
8
SELECT OWNER, TABLE_NAME FROM DBA_LOGSTDBY_NOT_UNIQUE
WHERE (OWNER, TABLE_NAME) NOT IN
(SELECT DISTINCT OWNER, TABLE_NAME FROM DBA_LOGSTDBY_UNSUPPORTED)
  AND BAD_COLUMN = 'Y';
 
OWNER                          TABLE_NAME
------------------------------ ------------------------------
SCOTT                          SCOTT_BLOB
1.3 create disabled primary key with RELY constraint on a table

If you ensure rows in a table are unique, you can create a disabled primary key RELY constraint on the table. Thus logging primary key along with modifications generates overhead on the primary database. For example: ALTER TABLE T ADD PRIMARY KEY (id, name) RELY DISABLE

Step 5.1) Start up the 2nd standby database in nomount state

1
2
3
4
5
6
7
8
9
10
[oracle@gchen-pc dbs]$ export ORACLE_SID=DB11R2LS
[oracle@gchen-pc dbs]$ sqlplus / as sysdba
idle> startup nomount;
ORACLE instance started.
 
Total System Global Area  835104768 bytes
Fixed Size                  2217952 bytes
Variable Size             490735648 bytes
Database Buffers          335544320 bytes
Redo Buffers                6606848 bytes
Step 5.2) From primary database, connect to both primary database and standby database using RMAN

1
2
3
4
5
export ORACLE_SID=DB11R2
[oracle@gchen-pc dbs]$ rman target / auxiliary sys/iamsys@db11r2ls
 
connected to target database: DB11R2 (DBID=4171050541)
connected to auxiliary database DB11R2 (not mounted)
Step 5.3) Run this command to create standby database

1
2
3
4
[oracle@gchen-pc dbs]$ rman target sys/iamsys@db11r2 auxiliary sys/iamsys@db11r2ls
 
RMAN> spool log to 'duplication.log'
RMAN> duplicate target database for standby from active database dorecover;
From another shell monitor rman log file

+ expand source
Monitor rman process by querying on views v$session_longops, v$rman_status select s.process, r.operation, r.status, r.mbytes_processed as “PCT”, s.status from v$rman_status r join v$session s using (sid); Step 5.4) Connect to the physical standby database and start MRP (Managed Recovery Process)

1
2
3
4
5
6
7
8
9
10
11
12
13
export ORACLE_SID=DB11R2LS
sqlplus / as sysdba
 
idle> shutdown immediate;
idl> starup
Database opened.
 
sys@db11r2ls> recover managed standby database using current logfile disconnect;
Media recovery complete.
 
[oracle@gchen-pc dbs]$ ps -ef |grep mrp
oracle    8346     1  0 00:45 ?        00:00:01 ora_mrp0_DB11R2LS
oracle    8370  5019  0 00:47 pts/2    00:00:00 grep mrp
Step 5.4) Make sure this physical standby is in Sync with primary databaseUse following query on Standby to check:

1
2
3
4
5
6
7
8
9
10
11
SELECT ARCH.THREAD# "Thread", ARCH.SEQUENCE# "Last Sequence Received", APPL.SEQUENCE# "Last Sequence Applied"
FROM
(SELECT THREAD# ,SEQUENCE# FROM V$ARCHIVED_LOG WHERE (THREAD#,FIRST_TIME ) IN (SELECT THREAD#,MAX(FIRST_TIME) FROM V$ARCHIVED_LOG GROUP BY THREAD#)) ARCH,
(SELECT THREAD# ,SEQUENCE# FROM V$LOG_HISTORY WHERE (THREAD#,FIRST_TIME ) IN (SELECT THREAD#,MAX(FIRST_TIME) FROM V$LOG_HISTORY GROUP BY THREAD#)) APPL
WHERE
ARCH.THREAD# = APPL.THREAD#
ORDER BY 1;
 
    Thread Last Sequence Received Last Sequence Applied
---------- ---------------------- ---------------------
         1                    187                   187
Step 5.5) Stop Redo Apply on the Physical Standby Database

1
sys@db11r2ls> alter database recover managed standby database cancel;
Step 5.6) Build a Dictionary in the Redo Data on Primary Database

1
2
3
export ORACLE_SID=DB11R2
sqlplus / as sysdba
sys@db11r2> exec DBMS_LOGSTDBY.BUILD; 
The DBMS_LOGSTDBY.BUILD procedure waits for all existing transactions to complete. Long-running transactions executed on the primary database will affect the timeliness of this command. 
Convert to a Logical Standby Database

sys@db11r2ls> alter database recover to logical standby DB11R2LS;
NOTE: at the first of execution of the previous command, it hanged for quit a long time before I canceled it. The alert.log file explained that database had been waiting for latest archived log to be arrive from primary but failed to receive it, just as shown below:

1
"Media Recovery Waiting for thread 1 sequence 188 (in transit)..."
After repeating to re-create the standby for several times, I found the problem is that I did not fully in accordance with the steps described in note 738643.1, as I built the standby dictionary on primary (step 5.6) before stopping the managed recovery process on standby (step 5.5). Having fixed that problem, the command “alter database recover to logical standby” was executed instantly.
Step 5.7) Shutdown and Startup Logical Standby Database in Mount Stage

1
2
sys@db11gr2ls> shutdown immediate;
idle> startup mount;
Step 5.8) Open the Logical Standby Database
idle> alter database open resetlogs;
Step 5.9) Start Logical Apply on Standby